<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>JuliaGPU</title>
    <link>https://juliagpu.org/</link>
    <description>Recent content on JuliaGPU</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>en-us</language>
    
	<atom:link href="https://juliagpu.org/index.xml" rel="self" type="application/rss+xml" />
    
    
    <item>
      <title>CUDAnative 3.0 and CuArrays 2.0</title>
      <link>https://juliagpu.org/cudanative_3.0-cuarrays_2.0/</link>
      <pubDate>Wed, 25 Mar 2020 00:00:00 +0000</pubDate>
      
      <guid>https://juliagpu.org/cudanative_3.0-cuarrays_2.0/</guid>
      <description>This release of the Julia CUDA stack contains some exciting new features: automatic installation of CUDA using artifacts, full support for GPU method redefinitions, and experimental support for multitasking and multithreading. The release is technically breaking, but most end-users should not be affected.
API changes Changes to certain APIs require these releases to be breaking, however, most users should not be affected and chances are you can just bump your Compat entries without any additional changes.</description>
    </item>
    
    <item>
      <title>Julia&#39;s Dramatic Rise in HPC and Elsewhere</title>
      <link>https://juliagpu.org/2020-01-14-hpcwire/</link>
      <pubDate>Tue, 14 Jan 2020 00:00:00 +0000</pubDate>
      
      <guid>https://juliagpu.org/2020-01-14-hpcwire/</guid>
      <description></description>
    </item>
    
    <item>
      <title>Accelerating Tensor Computations in Julia with the GPU</title>
      <link>https://juliagpu.org/2020-01-05-itensors/</link>
      <pubDate>Sun, 05 Jan 2020 00:00:00 +0000</pubDate>
      
      <guid>https://juliagpu.org/2020-01-05-itensors/</guid>
      <description></description>
    </item>
    
    <item>
      <title>New website for JuliaGPU</title>
      <link>https://juliagpu.org/new_site/</link>
      <pubDate>Thu, 12 Dec 2019 00:00:00 +0000</pubDate>
      
      <guid>https://juliagpu.org/new_site/</guid>
      <description>Welcome to the new landing page for the JuliaGPU organization. This website serves as an introduction to the several packages for programming GPUs in Julia, with pointers to relevant resources for new users.
The sources for this website are hosted at GitHub and generated using Hugo, feel free to open an issue or pull request if you think it could be improved.</description>
    </item>
    
    <item>
      <title>DifferentialEquations.jl v6.9.0 released with automatic Multi-GPU support</title>
      <link>https://juliagpu.org/2019-12-03-diffeq-0.6.9/</link>
      <pubDate>Tue, 03 Dec 2019 00:00:00 +0000</pubDate>
      
      <guid>https://juliagpu.org/2019-12-03-diffeq-0.6.9/</guid>
      <description></description>
    </item>
    
    <item>
      <title>Julia Computing Brings Support for NVIDIA GPU Computing on Arm Powered Servers</title>
      <link>https://juliagpu.org/2019-12-03-nvidia-arm-gpu/</link>
      <pubDate>Tue, 03 Dec 2019 00:00:00 +0000</pubDate>
      
      <guid>https://juliagpu.org/2019-12-03-nvidia-arm-gpu/</guid>
      <description></description>
    </item>
    
    <item>
      <title>An Introduction to GPU Programming in Julia</title>
      <link>https://juliagpu.org/2019-10-17-nextjournal-intro/</link>
      <pubDate>Thu, 17 Oct 2019 00:00:00 +0000</pubDate>
      
      <guid>https://juliagpu.org/2019-10-17-nextjournal-intro/</guid>
      <description></description>
    </item>
    
    <item>
      <title>DifferentialEquations.jl v6.4.0 released with full GPU ODE support</title>
      <link>https://juliagpu.org/2019-05-09-diffeq-0.6.4/</link>
      <pubDate>Thu, 09 May 2019 00:00:00 +0000</pubDate>
      
      <guid>https://juliagpu.org/2019-05-09-diffeq-0.6.4/</guid>
      <description></description>
    </item>
    
    <item>
      <title>Next Generation Climate Models leverage Julia and GPUs</title>
      <link>https://juliagpu.org/2019-03-04-nps-clima-gpu/</link>
      <pubDate>Mon, 04 Mar 2019 00:00:00 +0000</pubDate>
      
      <guid>https://juliagpu.org/2019-03-04-nps-clima-gpu/</guid>
      <description></description>
    </item>
    
    <item>
      <title>New Climate Model to be Built from the Ground Up</title>
      <link>https://juliagpu.org/2018-12-12-paoc-clima/</link>
      <pubDate>Wed, 12 Dec 2018 00:00:00 +0000</pubDate>
      
      <guid>https://juliagpu.org/2018-12-12-paoc-clima/</guid>
      <description></description>
    </item>
    
    <item>
      <title>Solving Systems of Stochastic PDEs and using GPUs in Julia</title>
      <link>https://juliagpu.org/2017-12-11-diffeq-stochastic_pdes/</link>
      <pubDate>Mon, 11 Dec 2017 00:00:00 +0000</pubDate>
      
      <guid>https://juliagpu.org/2017-12-11-diffeq-stochastic_pdes/</guid>
      <description></description>
    </item>
    
    <item>
      <title>High-Performance GPU Computing in the Julia Programming Language</title>
      <link>https://juliagpu.org/2017-10-25-nvidia-devblog/</link>
      <pubDate>Wed, 25 Oct 2017 00:00:00 +0000</pubDate>
      
      <guid>https://juliagpu.org/2017-10-25-nvidia-devblog/</guid>
      <description></description>
    </item>
    
    <item>
      <title>About</title>
      <link>https://juliagpu.org/about/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://juliagpu.org/about/</guid>
      <description>Hugo is the worldâ€™s fastest framework for building websites. It is written in Go.
It makes use of a variety of open source projects including:
 https://github.com/russross/blackfriday https://github.com/alecthomas/chroma https://github.com/muesli/smartcrop https://github.com/spf13/cobra https://github.com/spf13/viper  Learn more and contribute on GitHub.</description>
    </item>
    
    <item>
      <title>AMD ROCm</title>
      <link>https://juliagpu.org/rocm/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://juliagpu.org/rocm/</guid>
      <description>The Julia programming support for AMD GPUs based on the ROCm platform aims to provide similar capabilities as the NVIDIA CUDA stack, with support for both low-level kernel programming as well as an array-oriented interface. It is similarly comprised of multiple packages:
 HSARuntime.jl: interfacing with the HSA runtime AMDGPUnative.jl: GPU kernel programming support ROCArrays.jl: array programming interface  At this point, the toolchain is highly experimental, and does not fully work on an out-of-the-box version of Julia.</description>
    </item>
    
    <item>
      <title>Learn</title>
      <link>https://juliagpu.org/learn/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://juliagpu.org/learn/</guid>
      <description>Currently, the Julia CUDA stack is the most mature, easiest to install, and full-featured. The CUDA.jl repository is a central place for the documentation of all relevant packages. Start with the instructions on how to install the stack, and follow with this introductory tutorial.
If you prefer videos, the presentations below highlight different aspects of the toolchain.
Effective CUDA GPU computing in Julia  Design and benefits of the Julia GPU stack Composability with existing (non-GPU) software Performance killers and tools for optimization Demonstration     How Julia is compiled to CUDA GPUs  Design and implementation of the Julia language Retargeting the language to GPUs Use of LLVM with LLVM.</description>
    </item>
    
    <item>
      <title>NVIDIA CUDA</title>
      <link>https://juliagpu.org/cuda/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://juliagpu.org/cuda/</guid>
      <description>The programming support for NVIDIA GPUs in Julia is provided by the CUDA.jl package. It is built on the CUDA toolkit, and aims to be as full-featured and offer the same performance as CUDA C. The toolchain is mature, has been under development since 2014 and can easily be installed on any current version of Julia using the integrated package manager.
CUDA.jl makes it possible to program NVIDIA GPUs at different abstraction levels:</description>
    </item>
    
    <item>
      <title>Other</title>
      <link>https://juliagpu.org/other/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://juliagpu.org/other/</guid>
      <description>Several other back-ends exist, not all of them with the same level of polish or support as the NVIDIA and AMD back-ends.
OpenCL Programming OpenCL GPUs in Julia is much more limited than other supported platforms. On recent versions of Julia, only OpenCL.jl is available. This package can be used to compile and execute GPU kernels written in OpenCL C.
oneAPI Support for the oneAPI programming model is a work in progress, and can be found in the unregistered oneAPI.</description>
    </item>
    
  </channel>
</rss>